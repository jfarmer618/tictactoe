{"ast":null,"code":"import{useState}from'react';import Player from'./components/Player.jsx';import GameBoard from'./components/GameBoard.jsx';import Log from'./components/Log.jsx';import GameOver from'./components/GameOver.jsx';import{WINNING_COMBINATIONS}from'./winning-combinations.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const PLAYERS={X:'Player 1',O:'Player 2'};const INITIAL_GAME_BOARD=[[null,null,null],[null,null,null],[null,null,null]];function deriveActivePlayer(gameTurns){let currentPlayer='X';if(gameTurns.length>0&&gameTurns[0].player==='X'){currentPlayer='O';}return currentPlayer;}function deriveGameBoard(gameTurns){let gameBoard=[...INITIAL_GAME_BOARD.map(array=>[...array])];for(const turn of gameTurns){const{square,player}=turn;const{row,col}=square;gameBoard[row][col]=player;}return gameBoard;}function deriveWinner(gameBoard,players){let winner;for(const combination of WINNING_COMBINATIONS){const firstSquareSymbol=gameBoard[combination[0].row][combination[0].column];const secondSquareSymbol=gameBoard[combination[1].row][combination[1].column];const thirdSquareSymbol=gameBoard[combination[2].row][combination[2].column];if(firstSquareSymbol&&firstSquareSymbol===secondSquareSymbol&&firstSquareSymbol===thirdSquareSymbol){winner=players[firstSquareSymbol];}}return winner;}function App(){const[players,setPlayers]=useState(PLAYERS);const[gameTurns,setGameTurns]=useState([]);const activePlayer=deriveActivePlayer(gameTurns);const gameBoard=deriveGameBoard(gameTurns);const winner=deriveWinner(gameBoard,players);const hasDraw=gameTurns.length===9&&!winner;function handleSelectSquare(rowIndex,colIndex){setGameTurns(prevTurns=>{const currentPlayer=deriveActivePlayer(prevTurns);const updatedTurns=[{square:{row:rowIndex,col:colIndex},player:currentPlayer},...prevTurns];return updatedTurns;});}function handleRestart(){setGameTurns([]);}function handlePlayerNameChange(symbol,newName){setPlayers(prevPlayers=>{return{...prevPlayers,[symbol]:newName};});}return/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsxs(\"div\",{id:\"game-container\",children:[/*#__PURE__*/_jsxs(\"ol\",{id:\"players\",className:\"highlight-player\",children:[/*#__PURE__*/_jsx(Player,{initialName:PLAYERS.X,symbol:\"X\",isActive:activePlayer==='X',onChangeName:handlePlayerNameChange}),/*#__PURE__*/_jsx(Player,{initialName:PLAYERS.O,symbol:\"O\",isActive:activePlayer==='O',onChangeName:handlePlayerNameChange})]}),(winner||hasDraw)&&/*#__PURE__*/_jsx(GameOver,{winner:winner,onRestart:handleRestart}),/*#__PURE__*/_jsx(GameBoard,{onSelectSquare:handleSelectSquare,board:gameBoard})]}),/*#__PURE__*/_jsx(Log,{turns:gameTurns})]});}export default App;","map":{"version":3,"names":["useState","Player","GameBoard","Log","GameOver","WINNING_COMBINATIONS","jsx","_jsx","jsxs","_jsxs","PLAYERS","X","O","INITIAL_GAME_BOARD","deriveActivePlayer","gameTurns","currentPlayer","length","player","deriveGameBoard","gameBoard","map","array","turn","square","row","col","deriveWinner","players","winner","combination","firstSquareSymbol","column","secondSquareSymbol","thirdSquareSymbol","App","setPlayers","setGameTurns","activePlayer","hasDraw","handleSelectSquare","rowIndex","colIndex","prevTurns","updatedTurns","handleRestart","handlePlayerNameChange","symbol","newName","prevPlayers","children","id","className","initialName","isActive","onChangeName","onRestart","onSelectSquare","board","turns"],"sources":["/Users/jfarm618/React/TicTacToe/src/App.jsx"],"sourcesContent":["import { useState } from 'react';\n\nimport Player from './components/Player.jsx';\nimport GameBoard from './components/GameBoard.jsx';\nimport Log from './components/Log.jsx';\nimport GameOver from './components/GameOver.jsx';\nimport { WINNING_COMBINATIONS } from './winning-combinations.js';\n\nconst PLAYERS = {\n  X: 'Player 1',\n  O: 'Player 2'\n};\n\nconst INITIAL_GAME_BOARD = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null],\n];\n\nfunction deriveActivePlayer(gameTurns) {\n  let currentPlayer = 'X';\n\n  if (gameTurns.length > 0 && gameTurns[0].player === 'X') {\n    currentPlayer = 'O';\n  }\n\n  return currentPlayer;\n}\n\nfunction deriveGameBoard(gameTurns) {\n  let gameBoard = [...INITIAL_GAME_BOARD.map((array) => [...array])];\n\n  for (const turn of gameTurns) {\n    const { square, player } = turn;\n    const { row, col } = square;\n\n    gameBoard[row][col] = player;\n  }\n\n  return gameBoard;\n}\n\nfunction deriveWinner(gameBoard, players) {\n  let winner;\n\n  for (const combination of WINNING_COMBINATIONS) {\n    const firstSquareSymbol =\n      gameBoard[combination[0].row][combination[0].column];\n    const secondSquareSymbol =\n      gameBoard[combination[1].row][combination[1].column];\n    const thirdSquareSymbol =\n      gameBoard[combination[2].row][combination[2].column];\n\n    if (\n      firstSquareSymbol &&\n      firstSquareSymbol === secondSquareSymbol &&\n      firstSquareSymbol === thirdSquareSymbol\n    ) {\n      winner = players[firstSquareSymbol];\n    }\n  }\n\n  return winner;\n}\n\nfunction App() {\n  const [players, setPlayers] = useState(PLAYERS);\n  const [gameTurns, setGameTurns] = useState([]);\n\n  const activePlayer = deriveActivePlayer(gameTurns);\n  const gameBoard = deriveGameBoard(gameTurns);\n  const winner = deriveWinner(gameBoard, players);\n  const hasDraw = gameTurns.length === 9 && !winner;\n\n  function handleSelectSquare(rowIndex, colIndex) {\n    setGameTurns((prevTurns) => {\n      const currentPlayer = deriveActivePlayer(prevTurns);\n\n      const updatedTurns = [\n        { square: { row: rowIndex, col: colIndex }, player: currentPlayer },\n        ...prevTurns,\n      ];\n\n      return updatedTurns;\n    });\n  }\n\n  function handleRestart() {\n    setGameTurns([]);\n  }\n\n  function handlePlayerNameChange(symbol, newName) {\n    setPlayers(prevPlayers => {\n      return {\n        ...prevPlayers,\n        [symbol]: newName\n      };\n    });\n  }\n\n  return (\n    <main>\n      <div id=\"game-container\">\n        <ol id=\"players\" className=\"highlight-player\">\n          <Player\n            initialName={PLAYERS.X}\n            symbol=\"X\"\n            isActive={activePlayer === 'X'}\n            onChangeName={handlePlayerNameChange}\n          />\n          <Player\n            initialName={PLAYERS.O}\n            symbol=\"O\"\n            isActive={activePlayer === 'O'}\n            onChangeName={handlePlayerNameChange}\n          />\n        </ol>\n        {(winner || hasDraw) && (\n          <GameOver winner={winner} onRestart={handleRestart} />\n        )}\n        <GameBoard onSelectSquare={handleSelectSquare} board={gameBoard} />\n      </div>\n      <Log turns={gameTurns} />\n    </main>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}